@Library('cr_shared_library@master')

import org.cruntov.jenkins.components.*


pipeline {
    agent {
        label 'Slave'
    }

    environment {
        Cluster_Build_Text = 'cluster_build'
        Aws_Region = 'us-east-1'
        Docker_Registry = '315727832121.dkr.ecr.us-east-1.amazonaws.com'
        ECR_Repository = 'maven-cruntov'
        Docker_Creds = 'CR_AWS_ECR'
        Kube_Config = 'CR_Kube_Config'
        Kuber_Secret = 'ecr-cruntov-creds'
        Kuber_Namespace = 'petclinic'
        SQL_USER = credentials('Cruntov_mvn_SQL_USER')
        SQL_PASS = credentials('Cruntov_mvn_SQL_PASS')
        SQL_URL = credentials('Cruntov_mvn_SQL_URL')


    }

    stages {
        stage('Preparing'){
            steps{
                script{
                    test_docker = new Docker_ECR(steps, this)
                    aws_cluster = new Kubernetes_Cluster(steps, this)
                    cluster_build_check()
                }
            }
        }
        stage('Creating Docker Image'){
            steps{
                script{
                    test_docker.build_image()
                }
            }
        }

        stage('Push Image to ECR'){
            steps{
                script{
                    test_docker.push_to_ecr()
                }
            }
        }
        stage('Docker Image removing'){
            steps{
                script{
                    test_docker.image_remove()
                }
            }
        }

            stage('Infrastructure build'){
                when {
                    expression{ BRANCH_NAME == 'master' }
                }
                steps{
                    script{
                        if(Build_Cluster == 0 ){
                            build 'cruntov_Kuber_AWS/master'
                        }
                    }
                }
            }

            stage('Kuber Deploy'){
                when {
                    expression{ BRANCH_NAME == 'master' }
                }
                steps{
                    script{
                        aws_cluster.deploy_app()
                    }
                }
            }



    }
    post{
        always{
            Workspace_Cleaning()
        }
    }
}

def cluster_build_check(){
    Build_Cluster = sh(
        script: 'git log --format=format:%s -1 ${GIT_COMMIT} | egrep "\ ${Cluster_Build_Text}" ',
        returnStatus: true
    )
}
def Workspace_Cleaning(){
    cleanWs()
    echo("""
        Workspace Cleaned
    """)
}
