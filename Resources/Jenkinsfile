@Library('cr_shared_library@master')

import org.cruntov.jenkins.components.*


pipeline {
    agent {
        label 'Slave'
    }

    environment {
        Skip_Cluster_Build_Text = 'skip_cluster_build'
        Aws_Region = 'us-east-1'
        Docker_Registry = '315727832121.dkr.ecr.us-east-1.amazonaws.com'
        ECR_Repository = 'maven-cruntov'
        Docker_Creds = 'CR_AWS_ECR'
        Kube_Config = 'CR_Kube_Config'
        Kuber_Secret = 'ecr-cruntov-creds'
        SQL_USER = credentials('Cruntov_mvn_SQL_USER')
        SQL_PASS = credentials('Cruntov_mvn_SQL_PASS')
        SQL_URL = credentials('Cruntov_mvn_SQL_URL')


    }

    stages {
        stage('Preparing'){
            steps{
                script{
                    test_docker = new Docker_ECR(steps, this)
                    aws_cluster = new Kubernetes_Cluster(steps, this)
                    sh('git log --format=format:%s -1 ${GIT_COMMIT} > commit_msg.txt')
                    Skip_Cluster = sh(
                        script: """grep "${Skip_Cluster_Build_Text}" commit_msg.txt""",
                        returnStatus: true
                    )
                    echo("""
                        Skip_Cluster --> ${Skip_Cluster}
                    """)
                }
            }
        }
        stage('Creating Docker Image'){
            steps{
                script{
                    test_docker.build_image()
                }
            }
        }

        stage('Push Image to ECR'){
            steps{
                script{
                    test_docker.push_to_ecr()
                }
            }
        }
        stage('Docker Image removing'){
            steps{
                script{
                    test_docker.image_remove()
                }
            }
        }

            stage('Infrastructure build'){
                when {
                    expression{ BRANCH_NAME == 'master' }
                }
                steps{
                    script{
//                         QUESTION = input(
//                             id: 'Deploy_Kuber',
//                             message: 'Run Deploy?',
//                             ok: 'yes',
//                             parameters: [
//                                 string(name: 'QUESTION', defaultValue: 'yes')
//                             ]
//                         )
                        if(Skip_Cluster != 0 ){
                            build 'cruntov_Kuber_AWS/master'
                        }
                    }
                }
            }

            stage('Kuber Deploy'){
                when {
                    expression{ BRANCH_NAME == 'master' }
                }
                steps{
                    script{
//                         if(Skip_Cluster == 0){
                            aws_cluster.deploy_app()
//                         }
                    }
                }
            }



    }
    post{
        always{
            Workspace_Cleaning()
        }
    }
}

def Workspace_Cleaning(){
        cleanWs()
        echo("""
             Workspace Cleaned
        """)
    }
