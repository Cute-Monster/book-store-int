@Library('cr_shared_library@master')

import org.cruntov.jenkins.components.*


pipeline {
    agent {
        label 'Slave'
    }

    environment {
        Aws_Region = 'us-east-1'
        Docker_Registry = '315727832121.dkr.ecr.us-east-1.amazonaws.com'
        ECR_Repository = 'maven-cruntov'
        Docker_Creds = 'CR_AWS_ECR'

    }

    stages {
        stage('Preparing'){
            steps{
                script{
                    test_docker = new Docker_ECR(steps, this)
                    aws_cluster = new Kubernetes_Cluster(steps, this)
                }
            }
        }
        stage('Creating Docker Image'){
            steps{
                script{
                    test_docker.build_image()
                }
            }
        }

        stage('Push Image to ECR'){
            steps{
                script{
                    test_docker.push_to_ecr()
                }
            }
        }
        stage('Docker Image removing'){
            steps{
                script{
                    test_docker.image_remove()
                }
            }
        }

        stage('Kuber Deploy'){
            steps{
                script{
//                     aws_cluster.deploy_app()
                    sh(
                       """sed -i -e "s/image-repo\\:image-tag/${Docker_Registry}\\/${ECR_Repository}\\:${GIT_COMMIT}/g" Resources/deployment.yml"""
                    )
                    sh("""
                        cat Resources/deployment.yml
                       """)
                    kubernetesDeploy(configs: "Resources/deployment.yml", kubeconfigId: 'CR_Kube_Config', dockerCredentials: [[credentialsId: "ecr:${Aws_Region}:${Docker_Creds}", url: "https://${Docker_Registry}"]])
//                     kubernetesDeploy configs: 'Resources/deployment.yml', dockerCredentials: [[credentialsId: "ecr:${Aws_Region}:${Docker_Creds}", url: "https://${Docker_Registry}"]], kubeConfig: [path: ''], kubeconfigId: 'CR_Kube_Config', secretName: 'ecr-docker-creds', ssh: [sshCredentialsId: '*', sshServer: ''], textCredentials: [certificateAuthorityData: '', clientCertificateData: '', clientKeyData: '', serverUrl: 'https://']
//                     docker.withRegistry("https://${Docker_Registry}", "ecr:${Aws_Region}:${Docker_Creds}") {
//                          kubernetesDeploy(configs: "Resources/deployment.yml", kubeconfigId: 'cruntov_kuber_master_config')
//                     }
//                     kubernetesDeploy(configs: "Resources/deployment.yml", kubeconfigId: 'cruntov_kuber_master_config')

//                 kubernetesDeploy configs: 'deployment1.yml', kubeConfig: [path: ''], kubeconfigId: 'cruntov_kuber_master_config', secretName: '', ssh: [sshCredentialsId: '*', sshServer: ''], textCredentials: [certificateAuthorityData: '', clientCertificateData: '', clientKeyData: '', serverUrl: 'https://']
//                     kubernetesDeploy(configs: 'Resources/deployment.yml', enableConfigSubstitution: false, kubeConfig: [path: ''], kubeconfigId: 'CR_Kube_Config', secretName: '', ssh: [sshCredentialsId: '*', sshServer: ''], textCredentials: [certificateAuthorityData: '', clientCertificateData: '', clientKeyData: '', serverUrl: 'https://'])
                }
            }
        }
    }
    post{
        always{
        echo("""
            ALWAYS THIS
        """)
            Workspace_Cleaning()
        }
    }
}

def Workspace_Cleaning(){
        echo("""
            Cleaning Workspace now
        """)
        cleanWs()
        echo("""
             Workspace Cleaned
        """)
    }
