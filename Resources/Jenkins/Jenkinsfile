@Library('cr_shared_library@master')

import org.cruntov.jenkins.components.Docker_ECR
import org.cruntov.jenkins.components.Kubernetes_Cluster



pipeline {
    agent {
        label 'JavaSlave'
    }

    options {
        ansiColor('xterm')
    }

    environment {
        ECR_Repository = 'maven-cruntov'
        Docker_Creds = 'CR_AWS_ECR'
        Kube_Config = 'CR_Kube_Config'
        Kuber_Secret = 'ecr-cruntov-creds'
        Kuber_Namespace = 'prod-petclinic'
        SQL_USER = credentials('Cruntov_mvn_SQL_USER')
        SQL_PASS = credentials('Cruntov_mvn_SQL_PASS')
        SQL_URL = credentials('Cruntov_mvn_SQL_URL')
        SonarProjectKey = credentials('Cruntov_mvn_SonarProjectKey')
        SonarProjectLogin = credentials('Cruntov_mvn_SonarProjectLogin')


    }

    stages {
        stage('Preparing'){
            steps{
                script{
                    base_environment()
                    test_docker = new Docker_ECR(steps, this)
                    aws_cluster = new Kubernetes_Cluster(steps, this)
                    cluster_build_check()
                    kuber_namespace_defenition()
                }
            }
        }
        stage('Creating Docker Image'){
            steps{
                script{
                    test_docker.build_image()
                }
            }
        }

        stage('Push Image to ECR'){
            steps{
                script{
                    test_docker.push_to_ecr()
                }
            }
        }
        stage('Docker Image removing'){
            steps{
                script{
                    test_docker.image_remove()
                }
            }
        }

        stage('Infrastructure build'){
            when {
                expression{ BRANCH_NAME == 'master' }
            }
            steps{
                script{
                    if( Build_Cluster == 0 ){
                        build 'cruntov_Kuber_AWS/master'
                    }
                }
            }
        }

        stage('Kuber Deploy'){
            when {
                expression{ BRANCH_NAME == 'master' }
            }
            steps{
                script{
                    aws_cluster.deploy_app()
                }
            }
        }
    }
    post{
        always{
            Workspace_Cleaning()
        }
    }
}

def cluster_build_check(){
    Build_Cluster = sh(
        script: """git log --format=format:%s -1 ${GIT_COMMIT} | grep -F ' ${Cluster_Build_Text}' """,
        returnStatus: true
    )
}

def kuber_namespace_defenition(){
    if( BRANCH_NAME == 'master' ){
        Kuber_Namespace = 'prod-petclinic'
    }else{
        Kuber_Namespace = 'dev-petclinic'
    }
}


def Workspace_Cleaning(){
    cleanWs()
    echo("""
        Workspace Cleaned
    """)
}
